### YamlMime:UniversalReference
items:
  - uid: azure-event-processor-host.EventProcessorHost
    name: EventProcessorHost
    fullName: EventProcessorHost
    children:
      - azure-event-processor-host.EventProcessorHost.closed
      - azure-event-processor-host.EventProcessorHost.consumerGroup
      - >-
        azure-event-processor-host.EventProcessorHost.createFromAadTokenCredentials
      - azure-event-processor-host.EventProcessorHost.createFromConnectionString
      - azure-event-processor-host.EventProcessorHost.createHostName
      - azure-event-processor-host.EventProcessorHost.error
      - azure-event-processor-host.EventProcessorHost.constructor
      - azure-event-processor-host.EventProcessorHost.getHubRuntimeInformation
      - azure-event-processor-host.EventProcessorHost.getPartitionIds
      - azure-event-processor-host.EventProcessorHost.getPartitionInformation
      - azure-event-processor-host.EventProcessorHost.hostName
      - azure-event-processor-host.EventProcessorHost.message
      - azure-event-processor-host.EventProcessorHost.opened
      - azure-event-processor-host.EventProcessorHost.start
      - azure-event-processor-host.EventProcessorHost.stop
    langs:
      - typeScript
    type: class
    summary: Describes the Event Processor Host to process events from an EventHub.
    extends:
      name: EventEmitter
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.closed
    name: closed
    fullName: closed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Closed: Triggered whenever a partition loses its lease and has to stop
      receiving,

      or when the host is shut down. The PartitionContext and the closing reason
      is passed to the

      event listener.
    syntax:
      content: 'static closed: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.consumerGroup
    name: consumerGroup
    fullName: consumerGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: Provides the consumer group name for the Event processor host.
    syntax:
      content: 'consumerGroup: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: >-
      azure-event-processor-host.EventProcessorHost.createFromAadTokenCredentials
    name: createFromAadTokenCredentials
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new host to process events from an Event Hub.
    syntax:
      content: >-
        static function createFromAadTokenCredentials(hostName: string,
        storageConnectionString: string, namespace: string, eventHubPath:
        string, credentials: ApplicationTokenCredentials | UserTokenCredentials
        | DeviceTokenCredentials | MSITokenCredentials, options?:
        EventProcessorOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: namespace
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs.
            Example: "{your-sb-namespace}.servicebus.windows.net"
        - id: eventHubPath
          type:
            - string
          description: The name of the EventHub.
        - id: credentials
          type:
            - >-
              ApplicationTokenCredentials | UserTokenCredentials |
              DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the

            following: ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials

            | MSITokenCredentials.
        - id: options
          type:
            - azure-event-processor-host.EventProcessorOptions
          description: ''
          optional: true
      return:
        type:
          - azure-event-processor-host.EventProcessorHost
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.createFromConnectionString
    name: createFromConnectionString
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new host to process events from an Event Hub.
    syntax:
      content: >-
        static function createFromConnectionString(hostName: string,
        storageConnectionString: string, eventHubConnectionString: string,
        options?: ConnectionStringBasedOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: eventHubConnectionString
          type:
            - string
          description: >-
            Connection string for the Event Hub to receive from.

            Example:
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;

            SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - azure-event-processor-host.ConnectionStringBasedOptions
          description: ''
          optional: true
      return:
        type:
          - azure-event-processor-host.EventProcessorHost
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.createHostName
    name: createHostName
    children: []
    type: method
    langs:
      - typeScript
    summary: Convenience method for generating unique host name.
    syntax:
      content: 'static function createHostName(prefix?: string)'
      parameters:
        - id: prefix
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.error
    name: error
    fullName: error
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Error: Triggered when an error occurs on a given receiver. The
      EventHubsError or a generic

      Error object is passed the event listener.
    syntax:
      content: 'static error: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.constructor
    name: EventProcessorHost
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new host to process events from an Event Hub.
    syntax:
      content: >-
        new EventProcessorHost(hostName: string, storageConnectionString:
        string, eventHubClient: EventHubClient, options?: EventProcessorOptions)
      parameters:
        - id: hostName
          type:
            - string
          description: >-
            Name of the processor host. MUST BE UNIQUE.

            Strongly recommend including a Guid or a prefix with a guid to
            ensure uniqueness. You can use

            `EventProcessorHost.createHostName("your-prefix")`; Default:
            `js-host-${uuid()}`.
        - id: storageConnectionString
          type:
            - string
          description: >-
            Connection string to Azure Storage account used for

            leases and checkpointing. Example
            DefaultEndpointsProtocol=https;AccountName=<account-name>;

            AccountKey=<account-key>;EndpointSuffix=core.windows.net
        - id: eventHubClient
          type:
            - EventHubClient
          description: The EventHub client
        - id: options
          type:
            - azure-event-processor-host.EventProcessorOptions
          description: ''
          optional: true
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.getHubRuntimeInformation
    name: getHubRuntimeInformation
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the eventhub runtime information.
    syntax:
      content: function getHubRuntimeInformation()
      parameters: []
      return:
        type:
          - Promise<EventHubRuntimeInformation>
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.getPartitionIds
    name: getPartitionIds
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: function getPartitionIds()
      parameters: []
      return:
        type:
          - 'Promise<string[]>'
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.getPartitionInformation
    name: getPartitionInformation
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: 'function getPartitionInformation(partitionId: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: |
            Partition ID for which partition information is required.
      return:
        type:
          - Promise<EventHubPartitionRuntimeInformation>
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.hostName
    name: hostName
    fullName: hostName
    children: []
    langs:
      - typeScript
    type: property
    summary: Provides the host name for the Event processor host.
    syntax:
      content: 'hostName: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.message
    name: message
    fullName: message
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Message: Triggered whenever a message comes in on a given partition. The
      PartitionContext and

      EventData is passed to the event listener.
    syntax:
      content: 'static message: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.opened
    name: opened
    fullName: opened
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Opened: Triggered whenever a partition obtains its lease. The
      PartitionContext is passed to

      the event listener.
    syntax:
      content: 'static opened: string'
      return:
        type:
          - string
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.start
    name: start
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts the event processor host, fetching the list of partitions,
      (optionally) filtering

      them, and attempting to grab leases on the (filtered) set. For each
      successful lease, will

      get the details from the blob and start a receiver at the point where it
      left off previously.
    syntax:
      content: 'function start(options?: StartEPHOptions)'
      parameters:
        - id: options
          type:
            - azure-event-processor-host.StartEPHOptions
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-event-processor-host
  - uid: azure-event-processor-host.EventProcessorHost.stop
    name: stop
    children: []
    type: method
    langs:
      - typeScript
    summary: Stops the EventProcessorHost from processing messages.
    syntax:
      content: function stop()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-processor-host
references:
  - uid: azure-event-processor-host.EventProcessorOptions
    spec.typeScript:
      - name: EventProcessorOptions
        fullName: EventProcessorOptions
        uid: azure-event-processor-host.EventProcessorOptions
  - uid: azure-event-processor-host.StartEPHOptions
    spec.typeScript:
      - name: StartEPHOptions
        fullName: StartEPHOptions
        uid: azure-event-processor-host.StartEPHOptions
  - uid: azure-event-processor-host.EventProcessorHost
    spec.typeScript:
      - name: EventProcessorHost
        fullName: EventProcessorHost
        uid: azure-event-processor-host.EventProcessorHost
  - uid: azure-event-processor-host.ConnectionStringBasedOptions
    spec.typeScript:
      - name: ConnectionStringBasedOptions
        fullName: ConnectionStringBasedOptions
        uid: azure-event-processor-host.ConnectionStringBasedOptions
