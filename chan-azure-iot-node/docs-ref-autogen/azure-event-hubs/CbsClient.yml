### YamlMime:UniversalReference
items:
  - uid: azure-event-hubs.CbsClient
    name: CbsClient
    fullName: CbsClient
    children:
      - azure-event-hubs.CbsClient.constructor
      - azure-event-hubs.CbsClient.cbsLock
      - azure-event-hubs.CbsClient.close
      - azure-event-hubs.CbsClient.endpoint
      - azure-event-hubs.CbsClient.init
      - azure-event-hubs.CbsClient.negotiateClaim
      - azure-event-hubs.CbsClient.replyTo
    langs:
      - typeScript
    type: class
    summary: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.constructor
    name: CbsClient
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new CbsClient(context: ConnectionContext)'
      parameters:
        - id: context
          type:
            - azure-event-hubs.ConnectionContext
          description: ''
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.cbsLock
    name: cbsLock
    fullName: cbsLock
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'cbsLock: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.close
    name: close
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP cbs session to the Event Hub for this client,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.endpoint
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.init
    name: init
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a singleton instance of the CBS session if it hasn't been
      initialized previously on the given connection.
    syntax:
      content: function init()
      parameters: []
      return:
        type:
          - Promise<void>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.negotiateClaim
    name: negotiateClaim
    children: []
    type: method
    langs:
      - typeScript
    summary: Negotiates the CBS claim with the EventHub Service.
    syntax:
      content: 'function negotiateClaim(audience: string, tokenObject: TokenInfo)'
      parameters:
        - id: audience
          type:
            - string
          description: The audience for which the token is requested.
        - id: tokenObject
          type:
            - azure-event-hubs.TokenInfo
          description: The token object that needs to be sent in the put-token request.
      return:
        type:
          - Promise<any>
    package: azure-event-hubs
  - uid: azure-event-hubs.CbsClient.replyTo
    name: replyTo
    fullName: replyTo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'replyTo: string'
      return:
        type:
          - string
    package: azure-event-hubs
references:
  - uid: azure-event-hubs.ConnectionContext
    spec.typeScript:
      - name: ConnectionContext
        fullName: ConnectionContext
        uid: azure-event-hubs.ConnectionContext
  - uid: azure-event-hubs.TokenInfo
    spec.typeScript:
      - name: TokenInfo
        fullName: TokenInfo
        uid: azure-event-hubs.TokenInfo
