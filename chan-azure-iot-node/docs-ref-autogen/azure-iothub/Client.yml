### YamlMime:UniversalReference
items:
  - uid: azure-iothub.Client
    name: Client
    fullName: Client
    children:
      - azure-iothub.Client.close_1
      - azure-iothub.Client.close
      - azure-iothub.Client.fromConnectionString
      - azure-iothub.Client.fromSharedAccessSignature
      - azure-iothub.Client.getFeedbackReceiver_1
      - azure-iothub.Client.getFeedbackReceiver
      - azure-iothub.Client.getFileNotificationReceiver_1
      - azure-iothub.Client.getFileNotificationReceiver
      - azure-iothub.Client.invokeDeviceMethod_2
      - azure-iothub.Client.invokeDeviceMethod
      - azure-iothub.Client.invokeDeviceMethod_3
      - azure-iothub.Client.invokeDeviceMethod_1
      - azure-iothub.Client.open_1
      - azure-iothub.Client.open
      - azure-iothub.Client.send_1
      - azure-iothub.Client.send
      - azure-iothub.Client.ServiceReceiver
      - azure-iothub.Client.setRetryPolicy
      - azure-iothub.Client.Transport
      - azure-iothub.Client.TransportConfigOptions
      - azure-iothub.Client.TransportCtor
    langs:
      - typeScript
    type: class
    summary: >
      The IoT Hub service client is used to communicate with devices through an
      Azure IoT hub.

      It lets the SDK user:
        - send device-to-cloud (also known as commands) to devices: commands are queued on IoT Hub and delivered asynchronously only when the device is connected. Only 50 commands can be queued per device.
        - invoke direct methods on devices (which will work only if the device is currently connected: it's a synchronous way of communicating with the device)
        - listen for feedback messages sent by devices for previous commands.
        - listen for file upload notifications from devices.
      Users should create new <xref:azure-iothub.Client> instances by calling
      one of the factory methods,

      [fromConnectionString](xref:azure-iothub.Client.fromConnectionString) or

      [fromSharedAccessSignature](xref:azure-iothub.Client.fromSharedAccessSignature),

      to create an IoT Hub service Client.
    extends:
      name: EventEmitter
    package: azure-iothub
  - uid: azure-iothub.Client.close_1
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the connection to an IoT hub.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
    package: azure-iothub
  - uid: azure-iothub.Client.close
    name: close(IncomingMessageCallback<Disconnected>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the connection to an IoT hub.
    syntax:
      content: 'function close(done: IncomingMessageCallback<Disconnected>)'
      parameters:
        - id: done
          type:
            - azure-iothub.IncomingMessageCallback<Disconnected>
          description: ''
    package: azure-iothub
  - uid: azure-iothub.Client.fromConnectionString
    name: 'fromConnectionString(string, Client.TransportCtor)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates an IoT Hub service client from the given
                         connection string using the default transport
                         (Amqp) or the one specified in the second argument.
    syntax:
      content: >-
        static function fromConnectionString(connStr: string, transportCtor?:
        Client.TransportCtor)
      parameters:
        - id: connStr
          type:
            - string
          description: |-
            A connection string which encapsulates "device
                                             connect" permissions on an IoT hub.
        - id: transportCtor
          type:
            - azure-iothub.Client.TransportCtor
          description: ''
          optional: true
      return:
        type:
          - azure-iothub.Client
    package: azure-iothub
  - uid: azure-iothub.Client.fromSharedAccessSignature
    name: 'fromSharedAccessSignature(string, Client.TransportCtor)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates an IoT Hub service client from the given
                         shared access signature using the default transport
                         (Amqp) or the one specified in the second argument.
    syntax:
      content: >-
        static function fromSharedAccessSignature(sharedAccessSignature: string,
        transportCtor?: Client.TransportCtor)
      parameters:
        - id: sharedAccessSignature
          type:
            - string
          description: |-
            A shared access signature which encapsulates
                                       "service connect" permissions on an IoT hub.
        - id: transportCtor
          type:
            - azure-iothub.Client.TransportCtor
          description: ''
          optional: true
      return:
        type:
          - azure-iothub.Client
    package: azure-iothub
  - uid: azure-iothub.Client.getFeedbackReceiver_1
    name: getFeedbackReceiver()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a AmqpReceiver object which emits events when new feedback
      messages are received by the client.
    syntax:
      content: function getFeedbackReceiver()
      parameters: []
      return:
        type:
          - >-
            Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
    package: azure-iothub
  - uid: azure-iothub.Client.getFeedbackReceiver
    name: getFeedbackReceiver(IncomingMessageCallback<ServiceReceiver>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a AmqpReceiver object which emits events when new feedback
      messages are received by the client.
    syntax:
      content: >-
        function getFeedbackReceiver(done:
        IncomingMessageCallback<ServiceReceiver>)
      parameters:
        - id: done
          type:
            - >-
              azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
          description: ''
    package: azure-iothub
  - uid: azure-iothub.Client.getFileNotificationReceiver_1
    name: getFileNotificationReceiver()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a AmqpReceiver object which emits events when new file upload
      notifications are received by the client.
    syntax:
      content: function getFileNotificationReceiver()
      parameters: []
      return:
        type:
          - >-
            Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
    package: azure-iothub
  - uid: azure-iothub.Client.getFileNotificationReceiver
    name: getFileNotificationReceiver(IncomingMessageCallback<ServiceReceiver>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a AmqpReceiver object which emits events when new file upload
      notifications are received by the client.
    syntax:
      content: >-
        function getFileNotificationReceiver(done:
        IncomingMessageCallback<ServiceReceiver>)
      parameters:
        - id: done
          type:
            - >-
              azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
          description: ''
    package: azure-iothub
  - uid: azure-iothub.Client.invokeDeviceMethod_2
    name: 'invokeDeviceMethod(string, DeviceMethodParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Invokes a method on a particular device or module.
    syntax:
      content: >-
        function invokeDeviceMethod(deviceId: string, methodParams:
        DeviceMethodParams)
      parameters:
        - id: deviceId
          type:
            - string
          description: ''
        - id: methodParams
          type:
            - azure-iothub.DeviceMethodParams
          description: ''
      return:
        type:
          - Promise<azure-iothub.ResultWithIncomingMessage<any>>
    package: azure-iothub
  - uid: azure-iothub.Client.invokeDeviceMethod
    name: >-
      invokeDeviceMethod(string, DeviceMethodParams,
      IncomingMessageCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Invokes a method on a particular device or module.
    syntax:
      content: >-
        function invokeDeviceMethod(deviceId: string, methodParams:
        DeviceMethodParams, done?: IncomingMessageCallback<any>)
      parameters:
        - id: deviceId
          type:
            - string
          description: The identifier of an existing device identity.
        - id: methodParams
          type:
            - azure-iothub.DeviceMethodParams
          description: ''
        - id: done
          type:
            - azure-iothub.IncomingMessageCallback<any>
          description: ''
          optional: true
    package: azure-iothub
  - uid: azure-iothub.Client.invokeDeviceMethod_3
    name: 'invokeDeviceMethod(string, string, DeviceMethodParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Invokes a method on a particular device or module.
    syntax:
      content: >-
        function invokeDeviceMethod(deviceId: string, moduleId: string,
        methodParams: DeviceMethodParams)
      parameters:
        - id: deviceId
          type:
            - string
          description: ''
        - id: moduleId
          type:
            - string
          description: ''
        - id: methodParams
          type:
            - azure-iothub.DeviceMethodParams
          description: ''
      return:
        type:
          - Promise<azure-iothub.ResultWithIncomingMessage<any>>
    package: azure-iothub
  - uid: azure-iothub.Client.invokeDeviceMethod_1
    name: >-
      invokeDeviceMethod(string, string, DeviceMethodParams,
      IncomingMessageCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Invokes a method on a particular device or module.
    syntax:
      content: >-
        function invokeDeviceMethod(deviceId: string, moduleId: string,
        methodParams: DeviceMethodParams, done?: IncomingMessageCallback<any>)
      parameters:
        - id: deviceId
          type:
            - string
          description: ''
        - id: moduleId
          type:
            - string
          description: ''
        - id: methodParams
          type:
            - azure-iothub.DeviceMethodParams
          description: ''
        - id: done
          type:
            - azure-iothub.IncomingMessageCallback<any>
          description: ''
          optional: true
    package: azure-iothub
  - uid: azure-iothub.Client.open_1
    name: open()
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens the connection to an IoT hub.
    syntax:
      content: function open()
      parameters: []
      return:
        type:
          - Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
    package: azure-iothub
  - uid: azure-iothub.Client.open
    name: open(IncomingMessageCallback<Connected>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens the connection to an IoT hub.
    syntax:
      content: 'function open(done: IncomingMessageCallback<Connected>)'
      parameters:
        - id: done
          type:
            - azure-iothub.IncomingMessageCallback<Connected>
          description: ''
    package: azure-iothub
  - uid: azure-iothub.Client.send_1
    name: 'send(string, Message | Message.BufferConvertible)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a message to a device.
    syntax:
      content: >-
        function send(deviceId: string, message: Message |
        Message.BufferConvertible)
      parameters:
        - id: deviceId
          type:
            - string
          description: ''
        - id: message
          type:
            - Message | Message.BufferConvertible
          description: ''
      return:
        type:
          - Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
    package: azure-iothub
  - uid: azure-iothub.Client.send
    name: >-
      send(string, Message | Message.BufferConvertible,
      IncomingMessageCallback<MessageEnqueued>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a message to a device.
    syntax:
      content: >-
        function send(deviceId: string, message: Message |
        Message.BufferConvertible, done:
        IncomingMessageCallback<MessageEnqueued>)
      parameters:
        - id: deviceId
          type:
            - string
          description: The identifier of an existing device identity.
        - id: message
          type:
            - Message | Message.BufferConvertible
          description: |-
            The body of the message to send to the device.
                                         If `message` is not of type
                                         [Message](xref:azure-iot-common.Message),
                                         it will be converted.
        - id: done
          type:
            - azure-iothub.IncomingMessageCallback<MessageEnqueued>
          description: ''
    package: azure-iothub
  - uid: azure-iothub.Client.setRetryPolicy
    name: setRetryPolicy(RetryPolicy)
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the policy used by the client to retry network operations.
    syntax:
      content: 'function setRetryPolicy(policy: RetryPolicy)'
      parameters:
        - id: policy
          type:
            - RetryPolicy
          description: |
            policy used to retry operations (eg. open, send, etc.).
                          The SDK comes with 2 "built-in" policies: ExponentialBackoffWithJitter (default)
                          and NoRetry (to cancel any form of retry). The user can also pass its own object as
                          long as it implements 2 methods:
                          - shouldRetry(err: Error): boolean : indicates whether an operation should be retried based on the error type
                          - nextRetryTimeout(retryCount: number, throttled: boolean): number : returns the time to wait (in milliseconds)
                          before retrying based on the past number of attempts (retryCount) and the fact that the error is a throttling error or not.
    package: azure-iothub
references:
  - uid: Callback<azure-iothub.Client.ServiceReceiver>
    name: ServiceReceiver>
    spec.typeScript:
      - name: Callback<
        fullName: Callback<
      - name: ServiceReceiver
        fullName: ServiceReceiver
        uid: azure-iothub.Client.ServiceReceiver
      - name: '>'
        fullName: '>'
  - uid: azure-iothub.IncomingMessageCallback<Disconnected>
    name: IncomingMessageCallback<Disconnected>
    spec.typeScript:
      - name: IncomingMessageCallback
        fullName: IncomingMessageCallback
        uid: azure-iothub.IncomingMessageCallback
      - name: <Disconnected>
        fullName: <Disconnected>
  - uid: Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
    name: ResultWithIncomingMessage<Disconnected>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResultWithIncomingMessage
        fullName: ResultWithIncomingMessage
        uid: azure-iothub.ResultWithIncomingMessage
      - name: <Disconnected>>
        fullName: <Disconnected>>
  - uid: azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
    name: ServiceReceiver>
    spec.typeScript:
      - name: IncomingMessageCallback
        fullName: IncomingMessageCallback
        uid: azure-iothub.IncomingMessageCallback
      - name: <
        fullName: <
      - name: ServiceReceiver
        fullName: ServiceReceiver
        uid: azure-iothub.Client.ServiceReceiver
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
    name: ServiceReceiver>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResultWithIncomingMessage
        fullName: ResultWithIncomingMessage
        uid: azure-iothub.ResultWithIncomingMessage
      - name: <
        fullName: <
      - name: ServiceReceiver
        fullName: ServiceReceiver
        uid: azure-iothub.Client.ServiceReceiver
      - name: '>>'
        fullName: '>>'
  - uid: azure-iothub.DeviceMethodParams
    name: DeviceMethodParams
    spec.typeScript:
      - name: DeviceMethodParams
        fullName: DeviceMethodParams
        uid: azure-iothub.DeviceMethodParams
  - uid: azure-iothub.IncomingMessageCallback<any>
    name: IncomingMessageCallback<any>
    spec.typeScript:
      - name: IncomingMessageCallback
        fullName: IncomingMessageCallback
        uid: azure-iothub.IncomingMessageCallback
      - name: <any>
        fullName: <any>
  - uid: Promise<azure-iothub.ResultWithIncomingMessage<any>>
    name: ResultWithIncomingMessage<any>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResultWithIncomingMessage
        fullName: ResultWithIncomingMessage
        uid: azure-iothub.ResultWithIncomingMessage
      - name: <any>>
        fullName: <any>>
  - uid: azure-iothub.IncomingMessageCallback<Connected>
    name: IncomingMessageCallback<Connected>
    spec.typeScript:
      - name: IncomingMessageCallback
        fullName: IncomingMessageCallback
        uid: azure-iothub.IncomingMessageCallback
      - name: <Connected>
        fullName: <Connected>
  - uid: Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
    name: ResultWithIncomingMessage<Connected>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResultWithIncomingMessage
        fullName: ResultWithIncomingMessage
        uid: azure-iothub.ResultWithIncomingMessage
      - name: <Connected>>
        fullName: <Connected>>
  - uid: azure-iothub.IncomingMessageCallback<MessageEnqueued>
    name: IncomingMessageCallback<MessageEnqueued>
    spec.typeScript:
      - name: IncomingMessageCallback
        fullName: IncomingMessageCallback
        uid: azure-iothub.IncomingMessageCallback
      - name: <MessageEnqueued>
        fullName: <MessageEnqueued>
  - uid: Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
    name: ResultWithIncomingMessage<MessageEnqueued>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResultWithIncomingMessage
        fullName: ResultWithIncomingMessage
        uid: azure-iothub.ResultWithIncomingMessage
      - name: <MessageEnqueued>>
        fullName: <MessageEnqueued>>
  - uid: azure-iothub.Client.TransportCtor
    name: TransportCtor
    spec.typeScript:
      - name: TransportCtor
        fullName: TransportCtor
        uid: azure-iothub.Client.TransportCtor
  - uid: azure-iothub.Client
    name: Client
    spec.typeScript:
      - name: Client
        fullName: Client
        uid: azure-iothub.Client
  - uid: azure-iothub.Client.ServiceReceiver
    name: ServiceReceiver
  - uid: azure-iothub.Client.Transport
    name: Transport
  - uid: azure-iothub.Client.TransportConfigOptions
    name: TransportConfigOptions
  - uid: azure-iothub.Client.TransportCtor
    name: TransportCtor
